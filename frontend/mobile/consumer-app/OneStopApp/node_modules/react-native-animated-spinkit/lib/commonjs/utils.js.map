{"version":3,"sources":["utils.ts"],"names":["createKeyframeEasingFunction","keyframes","easing","t","keyframeIndex","length","prev","current","anim","duration","value","Easing","bezier","toValue","infinite","delay","timing","Animated","useNativeDriver","loop","stagger","time","amount","animationConfig","easingFunction","animation","frameDuration","inputRange","numFrames","Math","round","frame","push","values","index","delayedFrames","outputRange","slice","concat","interpolate"],"mappings":"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","sourcesContent":["import { EasingFunction, Easing, Animated } from 'react-native'\n\nexport function createKeyframeEasingFunction(\n  keyframes: number[],\n  easing: EasingFunction\n) {\n  return (t: number) => {\n    for (\n      let keyframeIndex = 1;\n      keyframeIndex < keyframes.length;\n      keyframeIndex++\n    ) {\n      if (t < keyframes[keyframeIndex] / 100) {\n        const prev = keyframes[keyframeIndex - 1] / 100\n        const current =\n          (keyframes[keyframeIndex] - keyframes[keyframeIndex - 1]) / 100\n\n        return prev + easing((t - prev) / current) * current\n      }\n    }\n    return t\n  }\n}\n\nexport interface AnimationConfig {\n  duration: number\n  value: Animated.Value\n  keyframes?: number[]\n  toValue?: number\n  easing?: EasingFunction\n  infinite?: boolean\n  delay?: number\n}\n\nexport function anim({\n  duration,\n  value,\n  keyframes = [0, 100],\n  easing = Easing.bezier(0.42, 0.0, 0.58, 1.0),\n  toValue = 100,\n  infinite = true,\n  delay = 0,\n}: AnimationConfig) {\n  const timing = Animated.timing(value, {\n    duration: duration,\n    easing: createKeyframeEasingFunction(keyframes, easing),\n    toValue: toValue,\n    useNativeDriver: true,\n    delay: delay,\n  })\n  return infinite ? Animated.loop(timing) : timing\n}\n\nexport function stagger(\n  time: number,\n  amount: number,\n  animationConfig: AnimationConfig\n) {\n  const {\n    duration,\n    value,\n    keyframes = [0, 100],\n    easing = Easing.bezier(0.42, 0.0, 0.58, 1.0),\n    toValue = 100,\n    infinite = true,\n    delay = 0,\n  } = animationConfig\n  const easingFunction = createKeyframeEasingFunction(keyframes, easing)\n  const timing = Animated.timing(value, {\n    duration: duration,\n    easing: easingFunction,\n    toValue: toValue,\n    useNativeDriver: true,\n    delay: delay,\n  })\n\n  const animation = infinite ? Animated.loop(timing) : timing\n\n  // React Native only does 60fps\n  // https://github.com/facebook/react-native/blob/d3980dceab90b118cc7f69696967aa7f8d4388d9/Libraries/Animated/src/animations/TimingAnimation.js#L78\n  const frameDuration = 1000.0 / 60.0\n  const inputRange: number[] = []\n  const numFrames = Math.round(animationConfig.duration / frameDuration)\n\n  for (let frame = 0; frame < numFrames; frame++) {\n    inputRange.push(easingFunction(frame / numFrames) * 100)\n  }\n\n  const values = []\n  for (let index = amount - 1; index >= 0; index--) {\n    const delayedFrames = Math.round(\n      ((index * time) / animationConfig.duration) * numFrames\n    )\n    const outputRange = inputRange\n      .slice(delayedFrames)\n      .concat(inputRange.slice(0, delayedFrames))\n\n    const value =\n      index === 0\n        ? animationConfig.value\n        : animationConfig.value.interpolate({ inputRange, outputRange })\n    values.push(value)\n  }\n\n  return { animation, values }\n}\n"]}