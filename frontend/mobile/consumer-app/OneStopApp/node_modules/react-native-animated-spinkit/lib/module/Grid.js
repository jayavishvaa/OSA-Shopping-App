function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { Animated, View } from 'react-native';
import { defaultProps } from './SpinnerProps';
import AnimationContainer from './AnimationContainer';
import { stagger } from './utils';
const values = [2, 3, 4, 1, 2, 3, 0, 1, 2];
export default class Grid extends React.Component {
  render() {
    const _this$props = this.props,
          {
      size,
      color,
      style,
      animating,
      hidesWhenStopped
    } = _this$props,
          rest = _objectWithoutProperties(_this$props, ["size", "color", "style", "animating", "hidesWhenStopped"]);

    return /*#__PURE__*/React.createElement(AnimationContainer, {
      initAnimation: () => ({
        grid: value => stagger(100, 5, {
          duration: 1300,
          value: value,
          keyframes: [0, 35, 70, 100]
        })
      }),
      animating: animating
    }, interpolations => /*#__PURE__*/React.createElement(View, _extends({
      style: [{
        width: size,
        height: size,
        flexWrap: 'wrap',
        flexDirection: 'row',
        opacity: !animating && hidesWhenStopped ? 0 : 1
      }, style]
    }, rest), values.map(value => interpolations.grid[value]).map((value, index) => /*#__PURE__*/React.createElement(Animated.View, {
      key: index,
      style: {
        width: size / 3,
        height: size / 3,
        backgroundColor: color,
        transform: [{
          scale: value.interpolate({
            inputRange: [0, 35, 70, 100],
            outputRange: [1, 0.01, 1, 1]
          })
        }]
      }
    }))));
  }

}

_defineProperty(Grid, "defaultProps", defaultProps);
//# sourceMappingURL=Grid.js.map